AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation stack to automate transcription of MP4, MP3, and WAV audio using Amazon Transcribe.

Parameters:
  InputBucketName:
    Type: String
    Default: !Sub "${AWS::StackName}-transcribe-input-${AWS::AccountId}-${AWS::Region}"
    Description: "The name of the input S3 bucket for audio files (MP4, MP3, WAV)"
  OutputBucketName:
    Type: String
    Default: !Sub "${AWS::StackName}-transcribe-output-${AWS::AccountId}-${AWS::Region}"
    Description: "The name of the output S3 bucket for transcription results"

Resources:
  # S3 Bucket for Input Files (MP4, MP3, WAV)
  TranscribeS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties: 
      BucketName: !Ref InputBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256  # Enforce AES256 encryption
      BucketKeyEnabled: true
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 1  # Expire input files after 1 day
            Prefix: ''  
      LoggingConfiguration:
        DestinationBucketName: !Ref TranscribeS3LogBucket
        LogFilePrefix: "transcribe-access-logs/"  # Store access logs in logging bucket
    Tags:
      - Key: Workload
        Value: Transcription

  # S3 Bucket for Transcription Output
  TranscribeOutputBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref OutputBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256  # Enforce AES256 encryption
      BucketKeyEnabled: true
    Tags:
      - Key: Workload
        Value: Transcription

  # S3 Bucket for Logging
  TranscribeS3LogBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AWS::StackName}-logs-${AWS::AccountId}-${AWS::Region}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256  # Enforce AES256 encryption for logging bucket
      AccessControl: LogDeliveryWrite  # Allow write access for S3 log delivery
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 2  # Expire logs after 2 days
            Prefix: ''
    Tags:
      - Key: Workload
        Value: Transcription

  # IAM Role for Lambda Function to Access S3 and Transcribe
  TranscribeLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com  # Allow Lambda to assume this role
            Action: sts:AssumeRole
      Policies:
        - PolicyName: TranscribeLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: 
                  - !Sub "arn:aws:s3:::${TranscribeS3Bucket}/*"
                  - !Sub "arn:aws:s3:::${TranscribeOutputBucket}/*"  # Allow access to input/output buckets
              - Effect: Allow
                Action:
                  - transcribe:StartTranscriptionJob
                  - transcribe:GetTranscriptionJob
                Resource: "*"  # Transcribe permissions for all jobs
    Tags:
      - Key: Workload
        Value: Transcription

  # Lambda Function for Audio Transcription Trigger
  TranscribeLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: "TranscribeAudioFunction"
      Handler: index.handler  # Python handler function
      Role: !GetAtt TranscribeLambdaRole.Arn  # IAM role for Lambda
      Runtime: python3.9  # Runtime for the Lambda function
      Timeout: 600  # 10-minute timeout for longer-running transcription jobs
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import logging

          s3 = boto3.client('s3')
          transcribe = boto3.client('transcribe')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              logger.info(f"Received event: {json.dumps(event)}")  # Log incoming event
              try:
                  bucket = event['Records'][0]['s3']['bucket']['name']
                  key = event['Records'][0]['s3']['object']['key']

                  audio_file_uri = f"s3://{bucket}/{key}"
                  job_name = key.split('.')[0]
                  output_bucket = os.environ['OUTPUT_BUCKET']
                  media_format = key.split('.')[-1]

                  # Valid media formats
                  supported_formats = ['mp4', 'mp3', 'wav']
                  if media_format not in supported_formats:
                      raise Exception(f"Unsupported media format: {media_format}")

                  response = transcribe.start_transcription_job(
                      TranscriptionJobName=job_name,
                      Media={'MediaFileUri': audio_file_uri},
                      MediaFormat=media_format,
                      LanguageCode='en-US',
                      OutputBucketName=output_bucket
                  )
                  logger.info(f"Started transcription job {job_name}")
                  return {
                      'statusCode': 200,
                      'body': json.dumps(f"Started transcription job {job_name}")
                  }
              except Exception as e:
                  logger.error(f"Error processing file {key} in bucket {bucket}: {str(e)}")  # Log error
                  raise e  # Raise error for further inspection
      Environment:
        Variables:
          OUTPUT_BUCKET: !Ref TranscribeOutputBucket
          INPUT_BUCKET: !Ref TranscribeS3Bucket  # Add input bucket as an environment variable
    Tags:
      - Key: Workload
        Value: Transcription

  # Lambda Log Group Retention Policy
  TranscribeLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${TranscribeLambda.FunctionName}"  # CloudWatch log group for Lambda
      RetentionInDays: 2  # Retain logs for 2 days
    Tags:
      - Key: Workload
        Value: Transcription

  # S3 Bucket Policy for Lambda Function Access
  TranscribeS3BucketPermission:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref TranscribeS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 's3:GetObject'
              - 's3:PutObject'  # Allow Lambda to access objects in the bucket
            Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Resource: !Sub "arn:aws:s3:::${TranscribeS3Bucket}/*"
    Tags:
      - Key: Workload
        Value: Transcription

  # Lambda Permission for S3 Trigger
  TranscribeLambdaS3Trigger:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref TranscribeLambda
      Principal: 's3.amazonaws.com'  # Allow S3 to invoke Lambda
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt TranscribeS3Bucket.Arn
    Tags:
      - Key: Workload
        Value: Transcription

  # S3 Bucket Notification to Trigger Lambda on Object Creation
  S3BucketNotification:
    Type: 'AWS::S3::BucketNotification'
    Properties:
      Bucket: !Ref TranscribeS3Bucket
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'  # Trigger Lambda on object creation
            Function: !GetAtt TranscribeLambda.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: ".mp4"  # Filter for MP4 files
                  - Name: suffix
                    Value: ".mp3"  # Filter for MP3 files
                  - Name: suffix
                    Value: ".wav"  # Filter for WAV files
    Tags:
      - Key: Workload
        Value: Transcription

Outputs:
  InputS3Bucket:
    Description: "S3 bucket to upload MP4, MP3, WAV files"
    Value: !Ref TranscribeS3Bucket
  
  OutputS3Bucket:
    Description: "S3 bucket where transcription results will be stored"
    Value: !Ref TranscribeOutputBucket

  LambdaFunctionARN:
    Description: "ARN of the Transcription Lambda Function"
    Value: !GetAtt TranscribeLambda.Arn
